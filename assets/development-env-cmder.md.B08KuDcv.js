import{_ as e,c as i,o as s,a2 as t}from"./chunks/framework.BskWUbxW.js";const u=JSON.parse('{"title":"Setting Up Your Development Environment with Cmder","description":"","frontmatter":{},"headers":[],"relativePath":"development-env-cmder.md","filePath":"development-env-cmder.md"}'),a={name:"development-env-cmder.md"},n=t(`<h1 id="setting-up-your-development-environment-with-cmder" tabindex="-1">Setting Up Your Development Environment with Cmder <a class="header-anchor" href="#setting-up-your-development-environment-with-cmder" aria-label="Permalink to &quot;Setting Up Your Development Environment with Cmder&quot;">â€‹</a></h1><p><strong>Cmder</strong> is a console emulator for Windows that integrates features from Unix-based systems through Git Bash, enhancing the command line experience. It offers a versatile toolset for developers and IT professionals, combining powerful Unix command availability with Windows&#39; native capabilities.</p><h2 id="enhanced-command-line-with-git-bash-integration" tabindex="-1">Enhanced Command Line with Git Bash Integration <a class="header-anchor" href="#enhanced-command-line-with-git-bash-integration" aria-label="Permalink to &quot;Enhanced Command Line with Git Bash Integration&quot;">â€‹</a></h2><h3 id="why-git-bash-with-cmder" tabindex="-1">Why Git Bash with Cmder? <a class="header-anchor" href="#why-git-bash-with-cmder" aria-label="Permalink to &quot;Why Git Bash with Cmder?&quot;">â€‹</a></h3><ul><li><strong>Unix Command Availability</strong>: Access commands like <code>ls</code>, <code>grep</code>, and <code>ssh</code> directly on Windows.</li><li><strong>Seamless Git Integration</strong>: Execute Git commands within the console, enhancing version control workflows.</li><li><strong>Scripting Flexibility</strong>: Utilize Cmder to write and execute complex bash scripts on Windows.</li><li><strong>Environment Versatility</strong>: Switch seamlessly between CMD, PowerShell, and WSL.</li><li><strong>Remote Connectivity</strong>: Manage remote Unix servers directly from Cmder.</li></ul><h2 id="installation-guide" tabindex="-1">Installation Guide <a class="header-anchor" href="#installation-guide" aria-label="Permalink to &quot;Installation Guide&quot;">â€‹</a></h2><ol><li><strong>Download</strong>: Visit the <a href="https://cmder.net" target="_blank" rel="noreferrer">official Cmder website</a> and download the latest version.</li><li><strong>Unzip</strong>: Extract the file to <code>C:\\Users\\&lt;WindowUser&gt;\\bin\\cmder</code>.</li></ol><h2 id="configuring-environment-variables" tabindex="-1">Configuring Environment Variables <a class="header-anchor" href="#configuring-environment-variables" aria-label="Permalink to &quot;Configuring Environment Variables&quot;">â€‹</a></h2><p>Set up the following environment variables for effective integration:</p><ul><li><strong>CMDER_ROOT</strong>: <code>C:\\Users\\&lt;WindowUser&gt;\\bin\\cmder</code></li><li><strong>CMDER_HOME</strong>: <code>C:\\Users\\&lt;WindowUser&gt;\\bin\\cmder</code></li><li><strong>ConEmuDir</strong>: <code>[cmder_root]\\vendor\\conemu-maximus5</code></li><li><strong>Update PATH</strong>: Add the Cmder path to your system&#39;s PATH variable.</li></ul><h2 id="organizing-development-tools" tabindex="-1">Organizing Development Tools <a class="header-anchor" href="#organizing-development-tools" aria-label="Permalink to &quot;Organizing Development Tools&quot;">â€‹</a></h2><p>Store all development tools under <code>C:\\Users\\&lt;WindowUser&gt;\\bin</code> for centralized management.</p><h2 id="using-aliases-and-shell-customizations" tabindex="-1">Using Aliases and Shell Customizations <a class="header-anchor" href="#using-aliases-and-shell-customizations" aria-label="Permalink to &quot;Using Aliases and Shell Customizations&quot;">â€‹</a></h2><h3 id="aliases" tabindex="-1">Aliases <a class="header-anchor" href="#aliases" aria-label="Permalink to &quot;Aliases&quot;">â€‹</a></h3><p>Define aliases in Cmder to streamline command executions. Instead of using <code>user_aliases.cmd</code>, you should add your aliases directly in the <code>.bashrc</code> file, which is executed every time a new shell session is started. This method ensures your aliases are always available.</p><h3 id="configuring-bashrc" tabindex="-1">Configuring .bashrc <a class="header-anchor" href="#configuring-bashrc" aria-label="Permalink to &quot;Configuring .bashrc&quot;">â€‹</a></h3><ol><li><p><strong>Navigate</strong> to your user home directory: <code>C:\\Users\\&lt;WindowUser&gt;</code></p></li><li><p><strong>Edit or create</strong> <code>.bashrc</code> and add your alias definitions in the format:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ls --color=auto&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ls -lah&#39;</span></span></code></pre></div></li></ol><h3 id="leveraging-bashrc-and-bash-profile" tabindex="-1">Leveraging .bashrc and .bash_profile <a class="header-anchor" href="#leveraging-bashrc-and-bash-profile" aria-label="Permalink to &quot;Leveraging .bashrc and .bash_profile&quot;">â€‹</a></h3><ul><li><strong>.bashrc</strong>: This file runs for each new bash instance. Place environment setups here.</li><li><strong>.bash_profile</strong>: This runs for login shells. Use it to execute commands that should run once at login.</li></ul><p>To utilize these files in Cmder:</p><ol><li>Navigate to <code>C:\\Users\\&lt;WindowUser&gt;</code>.</li><li>Create or modify <code>.bashrc</code> and <code>.bash_profile</code> to include your custom commands or environment settings.</li></ol><h2 id="changing-the-default-git-bash-prompt-in-cmder" tabindex="-1">Changing the Default Git Bash Prompt in Cmder <a class="header-anchor" href="#changing-the-default-git-bash-prompt-in-cmder" aria-label="Permalink to &quot;Changing the Default Git Bash Prompt in Cmder&quot;">â€‹</a></h2><h3 id="issue-with-conda-and-the-default-prompt" tabindex="-1">Issue with Conda and the Default Prompt <a class="header-anchor" href="#issue-with-conda-and-the-default-prompt" aria-label="Permalink to &quot;Issue with Conda and the Default Prompt&quot;">â€‹</a></h3><p>The default prompt symbol in Git Bash on Cmder is <code>Î»</code>, which can cause issues with some systems, such as Conda. Changing it to a more standard <code>$</code> can avoid potential bugs.</p><h3 id="steps-to-change-the-prompt" tabindex="-1">Steps to Change the Prompt <a class="header-anchor" href="#steps-to-change-the-prompt" aria-label="Permalink to &quot;Steps to Change the Prompt&quot;">â€‹</a></h3><ol><li><strong>Locate the Prompt Configuration File</strong>: Navigate to <code>C:\\Users\\&lt;WindowsUser&gt;\\bin\\cmder\\vendor\\git-for-windows\\etc\\profile.d\\git-prompt.sh</code>.</li><li><strong>Modify the Prompt</strong>: <ul><li>Open <code>git-prompt.sh</code> in a text editor.</li><li>Find the line that sets the prompt to <code>Î»</code>, usually <code>PS1=&quot;$PS1&quot;&#39;Î» &#39;</code>.</li><li>Comment out this line by adding <code>#</code> at the beginning.</li><li>Directly below it, add <code>PS1=&quot;$PS1&quot;&#39;$ &#39;</code>, to change the prompt to <code>$</code>.</li></ul></li><li><strong>Save the File</strong> and restart Cmder to apply the changes.</li></ol><p>This adjustment ensures better compatibility with various tools and scripts, particularly for users integrating Conda environments within Cmder.</p><h2 id="running-cmder-shell-as-vs-code-terminal" tabindex="-1">Running Cmder Shell as VS Code Terminal <a class="header-anchor" href="#running-cmder-shell-as-vs-code-terminal" aria-label="Permalink to &quot;Running Cmder Shell as VS Code Terminal&quot;">â€‹</a></h2><p><strong>ðŸ‘‰ Note:</strong> Ensure both VS Code and Cmder are updated to the latest versions to avoid compatibility issues.</p><ol><li><p><strong>Access VS Code Settings</strong>: Press <code>Ctrl + ,</code>, search for <code>terminal profiles windows</code>, and select <code>Edit in settings.json</code>.</p></li><li><p><strong>Open <code>settings.json</code> Manually</strong>: Use the Command Palette (<code>Ctrl + Shift + P</code>), type <code>settings.json</code>, and press Enter.</p></li><li><p><strong>Configure Terminal Profile</strong>: Update your <code>settings.json</code> to include the following configuration for Cmder:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cmder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terminal.integrated.profiles.windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Cmder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cmder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${env:CMDER_ROOT}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vendor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">git-for-windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terminal-cmd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terminal.ansiGreen&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>ðŸ‘‰ <strong>Note:</strong> Ensure that the CMDER_ROOT environment variable is correctly configured. Alternatively, you can replace \${env:cmder_root} with the actual path to your Cmder installation (not recommended).</p>`,31),o=[n];function l(r,h,d,c,p,g){return s(),i("div",null,o)}const k=e(a,[["render",l]]);export{u as __pageData,k as default};
